!function(){"use strict";var e=document.querySelector(".cards"),t=document.getElementById("popupAddContainer"),n=document.getElementById("popupImage"),r=(document.querySelectorAll(".popup-container__close-popup"),{template:"#card-template",cardSelector:".card",imageSelector:".card__img-card",popupImageSelector:".image-container__image-popup",likeButton:".card__card-like",likeCounter:document.getElementById("countLikes")}),o=(document.querySelector(".card__card-like"),document.getElementById("countLikes"),document.getElementById("addTitle"),document.getElementById("addImage"),document.getElementById("open-add-button")),i=document.querySelectorAll(".popup"),a={formSelector:".popup",inputSelector:".popup__input-popup",submitButtonSelector:".popup__button-popup",inactiveButtonClass:"popup__button-popup_inactive",inputErrorClass:".popup__input-popup_error",errorClass:".popup__error"},u=(document.getElementById("profileTitle"),document.getElementById("profileSubtitle"),document.querySelector(".profile__title")),c=document.querySelector(".profile__subtitle"),l=document.getElementById("profilePopup"),s=document.querySelector(".profile__avatar"),f=document.getElementById("popupAvatar"),p=document.querySelector(".profile__avatar-edit"),y=document.getElementById("popupDelete");function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==d(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==d(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===d(o)?o:String(o)),r)}var o}document.querySelectorAll(r.removeButton);var m=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupSelector=t,this._handleEscCloseBind=this._handleEscClose.bind(this),this.setEventListeners()}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupSelector.classList.add("popup-container_show"),document.addEventListener("keydown",this._handleEscCloseBind)}},{key:"close",value:function(){this._popupSelector.classList.remove("popup-container_show"),document.removeEventListener("keydown",this._handleEscCloseBind)}},{key:"_handleEscClose",value:function(e){"esc"!==e.key&&"Escape"!==e.key||this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupSelector.addEventListener("mousedown",(function(t){t.target.classList.contains("popup-container_show")&&e.close(),t.target.classList.contains("popup-container__close-popup")&&e.close()}))}}])&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==b(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==b(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===b(o)?o:String(o)),r)}var o}function v(){return v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=g(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},v.apply(this,arguments)}function S(e,t){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},S(e,t)}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=g(r);if(o){var n=g(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(n=[{key:"open",value:function(e,t){v(g(a.prototype),"open",this).call(this);var n=this._popupSelector.querySelector("img");n.src=t,n.alt=e,this._popupSelector.querySelector("p").textContent=e}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(m);function w(e){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w(e)}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==w(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==w(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===w(o)?o:String(o)),r)}var o}var j=function(){function e(t,n,r,o,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._cardSelector=n,this._name=t.name,this._link=t.link,this._id=t._id,this._me=t.me,this._owner=t.owner,this._handleCardClick=r.bind(this),this._popupDeleteConfirm=o,this._likes=t.likes,this.handleLike=this.handleLike.bind(this)}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"handleLike",value:function(){var e=this;this._likes.filter((function(t){return t._id===e._me.id})).length>0?api.deleteCardLike(this._id).then((function(t){e._likes=t.likes,e._likeCounter=t.likes.length,e._element.querySelector(".card__like-counter").textContent=t.likes.length})):api.addCardLike(this._id).then((function(t){e._likes=t.likes,e._likeCounter=t.likes.length,e._element.querySelector(".card__like-counter").textContent=t.likes.length}))}},{key:"generateCard",value:function(){var e=this;return this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".card__card-title").textContent=this._name,this._element.querySelector(".card__img-card").src=this._link,this._element.querySelector(".card__like-counter").textContent=this._likes.length,this._owner._id!==this._me.id&&(this._element.querySelector(".card__delete-button").style.display="none"),this._likes.filter((function(t){return t._id===e._me.id})).length>0&&this._element.querySelector(".card__card-like").classList.toggle("card__card-like_active"),this._element}},{key:"getCardId",value:function(){return this._id}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".card__img-card").addEventListener("click",this._handleCardClick),this._element.querySelector(".card__card-like").addEventListener("click",(function(){e._toggleLikeButton()})),this._element.querySelector(".card__delete-button").addEventListener("click",(function(){y.querySelector('.popup__input-popup[name="card_id"]').value=e._id,e._popupDeleteConfirm.open()})),this._element.querySelector(".card__card-like").addEventListener("click",this._handleLike)}},{key:"openPopup",value:function(){new k(n).open(this._name,this._link)}},{key:"_toggleLikeButton",value:function(){this._element.querySelector(".card__card-like").classList.toggle("card__card-like_active")}},{key:"_deleteCard",value:function(){this._element.querySelector(".card__delete-button").closest(".card").remove()}}])&&E(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==C(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==C(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===C(o)?o:String(o)),r)}var o}var O=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=t,this._formSelector=n.formSelector,this._inputSelector=n.inputSelector,this._submitButtonSelector=n.submitButtonSelector,this._inactiveButtonClass=n.inactiveButtonClass,this._inputErrorClass=n.inputErrorClass,this._errorClass=n.errorClass}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){var e=this;this._formElement.querySelectorAll(this._inputSelector).forEach((function(){e._formElement.addEventListener("submit",(function(e){e.preventDefault()})),e._setEventListeners()}))}},{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".popup__error_".concat(e.name));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".popup__error_".concat(e.name));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this;this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}}])&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==L(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==L(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===L(o)?o:String(o)),r)}var o}var q=function(){function e(t,n){var r=t.data,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=r,this._renderer=o,this._cardsContainer=n}var t,n;return t=e,(n=[{key:"clear",value:function(){this._cardsContainer.innerHTML=""}},{key:"renderItems",value:function(){var e=this;this.clear(),this._data.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._cardsContainer.append(e)}},{key:"setItems",value:function(e){this._data=e}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==B(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==B(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===B(o)?o:String(o)),r)}var o}function x(){return x="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=z(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},x.apply(this,arguments)}function U(e,t){return U=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},U(e,t)}function z(e){return z=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},z(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&U(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=z(r);if(o){var n=z(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._handleFormSubmit=t,n}return t=u,(n=[{key:"_getInputValues",value:function(){this._inputList=this._popupSelector.querySelectorAll(a.inputSelector);var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;x(z(u.prototype),"setEventListeners",this).call(this),this._popupSelector.querySelector("form").addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){x(z(u.prototype),"close",this).call(this),this._popupSelector.querySelector("form").reset()}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(m);function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==D(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===D(o)?o:String(o)),r)}var o}var V=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameUser=t,this._jobUser=n,this._avatar=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._nameUser.textContent,about:this._jobUser.textContent,id:this._idUser}}},{key:"setUserInfo",value:function(e){var t=e._id,n=e.name,r=e.about,o=e.avatar;n&&(this._nameUser.textContent=n),r&&(this._jobUser.textContent=r),o&&(this._avatar.src=o),t&&(this._idUser=t)}}])&&A(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==N(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==N(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===N(o)?o:String(o)),r)}var o}var H=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this.headers=r,this._authorization=r.authorization}var t,n;return t=e,(n=[{key:"getProfileInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:{authorization:this._authorization}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:{authorization:this._authorization}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"editProfile",value:function(e,t){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"addNewCard",value:function(e,t){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._authorization}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"addCardLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._authorization}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"deleteCardLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._authorization}}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"newAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._authorization},body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}}])&&G(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function J(e){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},J(e)}function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){Y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Y(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==J(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==J(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===J(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var K=document.getElementById("open-edit-button"),Q=new R(l,(function(e){document.forms["edit-profile"].querySelector('button[type="submit"]').textContent="Guardando...",oe.editProfile(e.name,e.about).then((function(e){te.setUserInfo(e)})).finally((function(){document.forms["edit-profile"].querySelector('button[type="submit"]').textContent="Guardar",Q.close()}))})),W=new R(f,(function(e){document.forms["edit-avatar"].querySelector('button[type="submit"]').textContent="Guardando...",oe.newAvatar(e.avatar).then((function(e){te.setUserInfo(e)})).finally((function(){document.forms["edit-avatar"].querySelector('button[type="submit"]').textContent="Guardar",Q.close()}))})),X=new R(y,(function(e){oe.deleteCard(e.card_id).then((function(){ie()}))}));p.addEventListener("click",(function(){W.open()})),K.addEventListener("click",(function(){Q.open()})),i.forEach((function(e){new O(e,a).enableValidation()}));var Z=new k(n);function $(e){Z.open(this._name,this._link)}function ee(){var e=this;this._likes.filter((function(t){return t._id===e._me.id})).length>0?oe.deleteCardLike(this._id).then((function(t){e._likes=t.likes,e._likeCounter=t.likes.length,e._element.querySelector(".card__like-counter").textContent=t.likes.length})):oe.addCardLike(this._id).then((function(t){e._likes=t.likes,e._likeCounter=t.likes.length,e._element.querySelector(".card__like-counter").textContent=t.likes.length}))}var te=new V(u,c,s),ne=new q({data:[{name:"Valle de Yosemite",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lago Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Montañas Calvas",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Parque Nacional de la Vanoise",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:function(t){t.me=te.getUserInfo();var n=new j(t,r.template,$,X,ee);e.prepend(n.generateCard())}},e);o.addEventListener("click",(function(){re.open()}));var re=new R(t,(function(t){oe.addNewCard(t.title,t.image).then((function(t){t.me=te.getUserInfo();var n=new j(t,r.template,$,X);e.prepend(n.generateCard())}))})),oe=new H({baseUrl:"https://around.nomoreparties.co/v1/web_es_cohort_04",headers:{authorization:"9a4a7412-795e-4a22-baae-2e0996dd6a25","Content-Type":"application/json"}});function ie(){oe.getInitialCards().then((function(e){ne.clear(),ne.setItems(e),ne.renderItems()}))}ie(),oe.getProfileInfo().then((function(e){te.setUserInfo(F(F({},e),{},{job:e.about}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,